{"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"vscode":{"interpreter":{"hash":"81f9c9dcd4d93c64d0814a2b55942fb30a0c4876fb0458ab3442ebf9a91d64e5"}},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30302,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/chaudharyzaryab/vision-transformer-from-scratch?scriptVersionId=181189640\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"## Description\n\nIn this programming homework , you will implement a small vision transformer (ViT) [1] in PyTorch.  Your implementation will roughly follow the ViT architecture  shown below. \n\nReference: \n\n[1] Dosovitskiy, A., Beyer, L., Kolesnikov, A., Weissenborn, D., Zhai, X., Unterthiner, T., Dehghani, M., Minderer, M., Heigold, G., Gelly, S. and Uszkoreit, J., 2020. An image is worth 16x16 words: Transformers for image recognition at scale. ICLR 2021. https://arxiv.org/abs/2010.11929 \n\n\n<img src=\"https://drive.google.com/uc?export=view&id=1TLwPc2Bo1HIowpQNqeVGTUZwtc3LPPiE\" width=\"600em\"/>\n\nYour implementation should have a \"patchify\" function to divide the input image into patches.  It should patchify a 28x28 MNIST image into 7 pixel by 7 pixel images_patches. So, in the end, an image should yield 16 images_patches, because there will be 4 patch rows and 4 patch columns. Each patch should be flattened to a 49-dimensional vector (49 because each patch is 7x7).\n\n\n\n\n\n","metadata":{"id":"SJC9aguL8TGS"}},{"cell_type":"markdown","source":"Next, each patch should pass through a linear layer as shown in the figure above. The dimension of the output of this layer is up to you (it is an hyper-parameter) -- let this number be D.  \n\nThen, you will add positional encoding to them as follows. This is a different positional encoding than the one ViT uses. \n\n<img src=\"https://docs.google.com/drawings/d/e/2PACX-1vQypjGsAthqfKFWuHYrvcIwLymPSIWeJ4nQJ8JYNfdSFYG03_X7YoffaYsmL6zDPTWyyIjDoR6SqQ2I/pub?w=935&h=628\"/>\n\nSo, the position of a patch in the first row, third column (patch with the green border in the figure) should be represented by the vectors: [1,0,0,0] and [0,0,1,0]. These two vectors should be concatenated with the LinearLayer output for that patch, which is D dimensional. So, in total, this patch will be represented by a 8+D dimensional vector, which we call a \"token\". \n\n","metadata":{"id":"Z8HE_2oiyPTa"}},{"cell_type":"markdown","source":"Each patch should be tokenized, that is, it should be  represented by a 8+D dimensional vector as described above. Consequently, a MNIST image would yield a total of 16 tokens. \n\n### Input to the Transformer \nIn ViT, they add an additional token (the 0th token above) and this is the token that accumulates the predicted class probabilities at the output of the transformer, and it is given to the final MLP classification head at the end.  In this homework, we won't add this special token. Instead, we will give the 1st token (which corresponds to the patch at the first row first column) to the final MLP classification head. \n\nA batch of images in MNIST is a Nx1x28x28 tensor, where N is the batch size. Using your patchify function, this tensor will be converted to a Nx16x49 tensor where 16 is the number of images_patches per image and 49 is the number of pixels in a patch. Next, this Nx16x49 tensor is passed through a LinearLayer, which outputs a Nx16xD tensor. Adding the poisitional encoding to this results in Nx16x(8+D) dimensional tensor, which should be fed to your ViT as input. \n","metadata":{"id":"1j4MrqWRzdQf"}},{"cell_type":"markdown","source":"### Transformer encoder architecture \n\nYour ViT should have the following architecture: \n\n<img src=\"https://drive.google.com/uc?export=view&id=1BxfTKoJhA8WffjwuqglHdSt0pTzL4c5L\" width=\"260em\"/>\n\nThere has to be more than one self attention modules. Hence, multi-head self attention. Their outputs are concatenated. Only one block of encoder is sufficient (L=1). ","metadata":{"id":"4yf1LEhD_A3g"}},{"cell_type":"markdown","source":"### FInal note\n\nThere are many ViT implementations out on the web. You are not allowed to use them as they are. \n\n**So, no copy & paste, please!**\n\n However, you can, of course, look at them and  be insipered by them. But at the end, **WRITE YOUR OWN CODE!** \n\nPlease do not use already implemented self attention layers such as https://pytorch.org/docs/stable/generated/torch.nn.MultiheadAttention.html. ","metadata":{"id":"py4cAm6sBnC8"}},{"cell_type":"code","source":"# You should import the appropriate packages for the code below to work. \nimport numpy as np\n\nfrom tqdm import tqdm, trange\n\nimport torch\nimport torch.nn as nn\nfrom torch.optim import Adam\nfrom torch.nn import CrossEntropyLoss\nfrom torch.utils.data import DataLoader\n\nfrom torchvision.transforms import ToTensor\nfrom torchvision.datasets.mnist import MNIST\n\n\n\n\n\n\ndef patchify(images, total_paches):\n    n, c, h, w = images.shape\n\n    assert h == w\n    images_patches = torch.zeros(n, total_paches ** 2, h * w * c // total_paches ** 2)\n    patch_size = h // total_paches\n\n    for idx, image in enumerate(images):\n        for x in range(total_paches):\n            for y in range(total_paches):\n                patch = image[:, x * patch_size: (x + 1) * patch_size, y * patch_size: (y + 1) * patch_size]\n                images_patches[idx, x * total_paches + y] = patch.flatten()\n    return images_patches\n\n\nclass MyMSA(nn.Module):\n    def __init__(self, d, n_heads=2):\n        super(MyMSA, self).__init__()\n        self.d = d\n        self.n_heads = n_heads\n\n        assert d % n_heads == 0, f\"Can't divide dimension {d} into {n_heads} heads\"\n\n        d_head = int(d / n_heads)\n        self.q_mappings = nn.ModuleList([nn.Linear(d_head, d_head) for _ in range(self.n_heads)])\n        self.k_mappings = nn.ModuleList([nn.Linear(d_head, d_head) for _ in range(self.n_heads)])\n        self.v_mappings = nn.ModuleList([nn.Linear(d_head, d_head) for _ in range(self.n_heads)])\n        self.d_head = d_head\n        self.softmax = nn.Softmax(dim=-1)\n\n    def forward(self, sequences):\n        result = []\n        for sequence in sequences:\n            seq_result = []\n            for head in range(self.n_heads):\n                q_mapping = self.q_mappings[head]\n                k_mapping = self.k_mappings[head]\n                v_mapping = self.v_mappings[head]\n\n                seq = sequence[:, head * self.d_head: (head + 1) * self.d_head]\n                q, k, v = q_mapping(seq), k_mapping(seq), v_mapping(seq)\n\n                attention = self.softmax(q @ k.T / (self.d_head ** 0.5))\n                seq_result.append(attention @ v)\n            result.append(torch.hstack(seq_result))\n        return torch.cat([torch.unsqueeze(r, dim=0) for r in result])\n\n\nclass MyViTBlock(nn.Module):\n    def __init__(self, hidden_d, n_heads, mlp_ratio=4):\n        super(MyViTBlock, self).__init__()\n        self.hidden_d = hidden_d\n        self.n_heads = n_heads\n\n        self.norm1 = nn.LayerNorm(hidden_d)\n        self.mhsa = MyMSA(hidden_d, n_heads)\n        self.norm2 = nn.LayerNorm(hidden_d)\n        self.mlp = nn.Sequential(\n            nn.Linear(hidden_d, mlp_ratio * hidden_d),\n            nn.GELU(),\n            nn.Linear(mlp_ratio * hidden_d, hidden_d)\n        )\n\n    def forward(self, x):\n        out = x + self.mhsa(self.norm1(x))\n        out = out + self.mlp(self.norm2(out))\n        return out\n\n\nclass MyViT(nn.Module):\n    def __init__(self, chw, n_patches=7, n_blocks=2, hidden_d=8, n_heads=2, out_d=10):\n        # Super constructor\n        super(MyViT, self).__init__()\n        \n        # Attributes\n        self.chw = chw # ( C , H , W )\n        self.n_patches = n_patches\n        self.n_blocks = n_blocks\n        self.n_heads = n_heads\n        self.hidden_d = hidden_d\n        \n        # Input and images_patches sizes\n        assert chw[1] % n_patches == 0, \"checking to divide imaged by paches for ous this valus is 7\"\n        assert chw[2] % n_patches == 0, \"checking to divide imaged by paches for ous this valus is 7\"\n        self.patch_size = (chw[1] / n_patches, chw[2] / n_patches)\n\n        # 1) Linear mapper\n        self.input_d = int(chw[0] * self.patch_size[0] * self.patch_size[1])\n        self.linear_mapper = nn.Linear(self.input_d, self.hidden_d)\n        \n        # 2) Learnable classification token\n        self.class_token = nn.Parameter(torch.rand(1, self.hidden_d))\n        \n        # 3) Positional embedding\n        self.register_buffer('positional_embeddings', positional_embeddings(n_patches ** 2 + 1, hidden_d), persistent=False)\n        \n        # 4) Transformer encoder blocks\n        self.blocks = nn.ModuleList([MyViTBlock(hidden_d, n_heads) for _ in range(n_blocks)])\n        \n        # 5) Classification MLPk\n        self.mlp = nn.Sequential(\n            nn.Linear(self.hidden_d, out_d),\n            nn.Softmax(dim=-1)\n        )\n\n\n    def forward(self, images):\n        \"\"\"\n        1) we will divide an image into 7 paches\n        2)then apply linear mapping because we will bind the location of the patch to from where we cut the image \n        3) embedding position to to images patches because we feed patches and their location both to the network\n    \n        \"\"\"\n    \n        n, c, h, w = images.shape\n        images_patches = patchify(images, self.n_patches).to(self.positional_embeddings.device)\n        tokens = self.linear_mapper(images_patches)\n        tokens = torch.cat((self.class_token.expand(n, 1, -1), tokens), dim=1)\n        output = tokens + self.positional_embeddings.repeat(n, 1, 1)\n        \n        for block in self.blocks:\n            output = block(output)\n\n        output = output[:, 0]\n        \n        return self.mlp(output) \n    \n\n\ndef positional_embeddings(array_length, d):\n    result = torch.ones(array_length, d)\n    for x in range(array_length):\n        for y in range(d):\n            result[x][y] = np.sin(x / (10000 ** (y / d))) if y % 2 == 0 else np.cos(x / (10000 ** ((y - 1) / d)))\n    return result","metadata":{"id":"anOIuhHSBu-o","execution":{"iopub.status.busy":"2024-06-03T05:05:10.787852Z","iopub.execute_input":"2024-06-03T05:05:10.788723Z","iopub.status.idle":"2024-06-03T05:05:13.388948Z","shell.execute_reply.started":"2024-06-03T05:05:10.788575Z","shell.execute_reply":"2024-06-03T05:05:13.387988Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"Your code will be tested with the following piece of code. \n\nDO NOT EDIT THE BLOCKS BELOW! \n\nWe do not care about your test set accuracy. It is sufficient to see a decreasing training loss plot which indicates that the network is learning. \n\nFor fast experimentation, we will only use the testing set (which has 10K examples). \n\n","metadata":{"id":"nNHmh_RtTLz3"}},{"cell_type":"code","source":"from torchvision import transforms\n# Loading data\ndataset = MNIST(root='./../datasets', train=False, download=True, transform=transforms.ToTensor())\ndata_loader = DataLoader(dataset, shuffle=True, batch_size=256)\n\n# Defining model and training options\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nmodel =  MyViT((1, 28, 28) ,out_d=10).to(device)\n\nnum_epochs = 1\nlr = 0.005","metadata":{"id":"CXPkJYHZUTb2","execution":{"iopub.status.busy":"2024-06-03T05:05:13.390575Z","iopub.execute_input":"2024-06-03T05:05:13.391606Z","iopub.status.idle":"2024-06-03T05:05:22.780993Z","shell.execute_reply.started":"2024-06-03T05:05:13.391554Z","shell.execute_reply":"2024-06-03T05:05:22.779532Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\nFailed to download (trying next):\nHTTP Error 403: Forbidden\n\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz to ./../datasets/MNIST/raw/train-images-idx3-ubyte.gz\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/9912422 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6220527919b241b581f9e42ab0c883d7"}},"metadata":{}},{"name":"stdout","text":"Extracting ./../datasets/MNIST/raw/train-images-idx3-ubyte.gz to ./../datasets/MNIST/raw\n\nDownloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\nFailed to download (trying next):\nHTTP Error 403: Forbidden\n\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz to ./../datasets/MNIST/raw/train-labels-idx1-ubyte.gz\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/28881 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8ca3bd49589c40629c6bee3aa3000ecf"}},"metadata":{}},{"name":"stdout","text":"Extracting ./../datasets/MNIST/raw/train-labels-idx1-ubyte.gz to ./../datasets/MNIST/raw\n\nDownloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\nFailed to download (trying next):\nHTTP Error 403: Forbidden\n\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz to ./../datasets/MNIST/raw/t10k-images-idx3-ubyte.gz\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/1648877 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3aa7018bb1934012818da1266e70144b"}},"metadata":{}},{"name":"stdout","text":"Extracting ./../datasets/MNIST/raw/t10k-images-idx3-ubyte.gz to ./../datasets/MNIST/raw\n\nDownloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\nFailed to download (trying next):\nHTTP Error 403: Forbidden\n\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz to ./../datasets/MNIST/raw/t10k-labels-idx1-ubyte.gz\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/4542 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bf4bde1d769d4219870ca1cc8f3fc7bf"}},"metadata":{}},{"name":"stdout","text":"Extracting ./../datasets/MNIST/raw/t10k-labels-idx1-ubyte.gz to ./../datasets/MNIST/raw\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# Training loop\noptimizer = Adam(model.parameters(), lr=lr)\ncriterion = CrossEntropyLoss()\nlosses = []\nfor epoch in range(num_epochs):\n    train_loss = 0.0\n    for it, batch in enumerate(data_loader): \n        x, y = batch\n        x, y = x.to(device), y.to(device)\n        y_hat = model(x)\n        loss = criterion(y_hat, y)\n\n        loss_val = loss.detach().cpu().item()\n        train_loss += loss_val / len(data_loader)\n        losses.append(loss_val)\n\n        print(it)\n\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n    print(f\"Epoch {epoch + 1}/{num_epochs} loss: {train_loss:.2f}\")\n\nfrom matplotlib import pyplot as plt\nplt.plot(losses)\nplt.show()","metadata":{"id":"ZSX0TlLmC4p9","execution":{"iopub.status.busy":"2024-06-03T05:05:22.783377Z","iopub.execute_input":"2024-06-03T05:05:22.783818Z","iopub.status.idle":"2024-06-03T05:05:51.132118Z","shell.execute_reply.started":"2024-06-03T05:05:22.783764Z","shell.execute_reply":"2024-06-03T05:05:51.130865Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\nEpoch 1/1 loss: 2.30\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}